@page "/chat/{ContactId}"
@page "/chat"
@page "/"
<div class="d-flex flex-grow-1 flex-row">
    <MudPaper Elevation="25" Class="py-4 flex-grow-1">
        <MudToolBar Dense="true">
            @if (string.IsNullOrEmpty(ContactId))
            {
                <MudIcon Icon="@Icons.Material.Outlined.Person" Style="margin-right:10px"></MudIcon>
                <MudText Typo="Typo.h6">chat</MudText>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Outlined.ChatBubble" Style="margin-right:10px"></MudIcon>
                <MudText Typo="Typo.h6">@ContactEmail</MudText>
            }

        </MudToolBar>
        <div class="d-flex flex-column px-4" style="max-height:65vh;min-height:65vh; overflow:scroll;" id="chatContainer">
            @foreach (var message in messages)
            {
                <div class="d-flex flex-row my-4">
                    <div class="mr-4">
                        @if (CurrentUserId == message.FromUserId)
                        {
                            <MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">@message.ToEmail.ToUpper().FirstOrDefault()</MudAvatar>
                        }
                        else
                        {
                            <MudAvatar Color="Color.Success" Style="height:50px; width:50px;">@message.FromEmail.ToUpper().FirstOrDefault()</MudAvatar>
                        }
                    </div>
                    <div>
                        <MudText Typo="Typo.body1">@message.FromEmail</MudText>
                        <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@message.CreatedDate.ToString("dd MMM, yyyy hh:mm tt")</MudText>
                        <MudText Typo="Typo.body2" Style=" padding: 15px;background-color: var(--mud-palette-background-grey);border-radius: 5px;margin-top:5px">@message.Message</MudText>
                    </div>
                    <MudMenu Icon="@Icons.Filled.MoreVert" Size="Size.Small">
                        <MudMenuItem>
                            <MudIconButton OnClick="@(() => DeleteChatMessage(message.MessageId))" Icon="@Icons.Filled.Delete" Color="Color.Warning" Size="Size.Small"></MudIconButton>
                        </MudMenuItem>
                    </MudMenu>
                </div>
            }
        </div>
        @if (!string.IsNullOrEmpty(error))
        {
            <div class="alert alert-danger mt-3 mb-0">@error</div>
        }
        <MudPaper Elevation="25" Class="d-flex flex-row px-2 mx-4" Style="">
            <MudTextField T="string" Placeholder="Enter your message..." DisableUnderLine="true" Class="mt-n2 mx-4"
                          @bind-Value="CurrentMessage" For="@(()=> CurrentMessage)" />
            <MudButton OnClick="SubmitAsync" StartIcon="@Icons.Material.Outlined.Send" Color="Color.Secondary" ButtonType="ButtonType.Button">Send</MudButton>
        </MudPaper>
    </MudPaper>
    <MudPaper Elevation="25" Class="pa-3 ml-6" MinWidth="350px">
        <MudToolBar Dense="true">
            <MudText Typo="Typo.h6" Inline="true" Class="mr-2">#</MudText>
            <MudText Typo="Typo.h6">my contacts</MudText>
        </MudToolBar>
        <div class="d-flex flex-column px-4" style="max-height:70vh;min-height:70vh; overflow:scroll;">
            <MudList Clickable="true">
                @foreach (var user in ChatUsers)
                {
                    @if (user.RequestById == int.Parse(CurrentUserId))
                    {
                        <MudListItem Class="pa-0 px-2" OnClick="@(() => LoadUserChat(user.FriendId.ToString()))">
                            <div class="d-flex flex-row mt-n1 mb-n1">
                                <div class="mr-4">
                                    <MudBadge Class="my-2">
                                        @if (user.RequestById.ToString() == ContactId)
                                        {
                                            <MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">
                                                @user.SenderEmail.ToUpper().FirstOrDefault()
                                            </MudAvatar>
                                        }
                                        else
                                        {
                                            <MudAvatar Color="Color.Dark" Style="height:70px; width:70px;">@user.SenderFirstName</MudAvatar>
                                        }
                                    </MudBadge>
                                </div>
                                <div>
                                    <MudText Typo="Typo.body2" Class="mt-3 mb-n2">@user.SenderEmail</MudText>
                                    <MudText Typo="Typo.body2" Class="mt-3 mb-n2">@user.SenderFirstName @user.SenderLastName </MudText>
                                </div>
                            </div>
                        </MudListItem>
                    }
                    @if (user.FriendId == int.Parse(CurrentUserId))
                    {
                        <MudListItem Class="pa-0 px-2" OnClick="@(() => LoadUserChat(user.RequestById.ToString()))">

                            <div class="d-flex flex-row mt-n1 mb-n1">
                                <div class="mr-4">
                                    <MudBadge Class="my-2">
                                        @if (user.RequestById.ToString() == ContactId)
                                        {
                                            <MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">
                                                @user.ReceiverEmail.ToUpper().FirstOrDefault()
                                            </MudAvatar>
                                        }
                                        else
                                        {
                                            <MudAvatar Color="Color.Dark" Style="height:70px; width:70px;">@user.ReceiverFirstName</MudAvatar>
                                        }
                                    </MudBadge>
                                </div>
                                <div>
                                    <MudText Typo="Typo.body2" Class="mt-3 mb-n2">@user.ReceiverEmail</MudText>
                                    <MudText Typo="Typo.body2" Class="mt-3 mb-n2">@user.ReceiverFirstName @user.ReceiverLastName </MudText>
                                </div>
                            </div>
                        </MudListItem>
                    }
                    <MudMenu Icon="@Icons.Filled.KeyboardArrowDown">
                        <MudMenuItem>
                            <MudButton OnClick="@(() => LoadFullChatHistory(user.FriendId.ToString()))" StartIcon="@Icons.Filled.History" Color="Color.Primary" Size="Size.Small" ButtonType="ButtonType.Button">Chat history</MudButton>
                        </MudMenuItem>
                        <MudMenuItem>
                            <MudButton OnClick="@(() => ShowInformation(user.FriendId.ToString()))" StartIcon="@Icons.Material.Outlined.Info" Color="Color.Info" Size="Size.Small" ButtonType="ButtonType.Button">Show profile info</MudButton>
                        </MudMenuItem>
                        <MudMenuItem>
                            <MudButton OnClick="@(() => DeleteChatHistory(user.FriendId.ToString()))" StartIcon="@Icons.Filled.Delete" Color="Color.Warning" Size="Size.Small" ButtonType="ButtonType.Button">Remove chat history</MudButton>
                        </MudMenuItem>
                    </MudMenu>
                }
            </MudList>
        </div>
    </MudPaper>
</div>

@code {
    [CascadingParameter] HubConnection hubConnection { get; set; }
    [Parameter] public string CurrentMessage { get; set; }
    [Parameter] public string CurrentUserId { get; set; }
    [Parameter] public string CurrentUserEmail { get; set; }
    [Parameter] public string Token { get; set; }
    [Inject] IJSRuntime _jsRunTime { get; set; }
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    private string error;
    private List<ChatMessages> messages = new List<ChatMessages>();
    private async Task SubmitAsync()
    {
        try
        {
            if (!string.IsNullOrEmpty(CurrentMessage) && !string.IsNullOrEmpty(ContactId) && IsConnected)
            {
                var chatHistory = new ChatMessages()
                    {
                        Message = CurrentMessage,
                        ToUserId = ContactId,
                        FromUserId = CurrentUserId,
                        CreatedDate = DateTime.Now,
                        FromEmail = CurrentUserEmail,
                        ToEmail = ContactEmail,
                    };
                await hubConnection.SendAsync("SendMessageAsync", chatHistory, CurrentUserEmail);
                await _chatService.SaveMessageAsync(CurrentUserId, chatHistory);
                CurrentMessage = string.Empty;
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _jsRuntime.InvokeAsync<string>("OnScrollEvent", "chatContainer");
    }
    protected override async Task OnInitializedAsync()
    {
        var user = _accountService.Account;
        CurrentUserId = user.Id.ToString();
        CurrentUserEmail = user.Email;
        Token = user.JwtToken;
        try
        {
            await CheckConnection(Token); // checking connection to hub
            hubConnection.On<ChatMessages, string>("ReceiveMessage", async (message, userName) =>
                    {
                        if ((ContactId == message.ToUserId && CurrentUserId == message.FromUserId))
                        {
                            messages.Add(message);
                        }
                        else if ((ContactId == message.FromUserId && CurrentUserId == message.ToUserId))
                        {
                            await hubConnection.SendAsync("ChatNotificationAsync", $"New Message From {userName}", ContactId, CurrentUserId);
                            messages.Add(message);
                        }
                        await _jsRuntime.InvokeAsync<string>("OnScrollEvent", "chatContainer");
                        StateHasChanged();
                    });

            await GetAllFriends(CurrentUserId);
            if (!string.IsNullOrEmpty(ContactId))
            {
                await LoadUserChat(ContactId);
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
    public List<Friend> ChatUsers = new List<Friend>();

    public Connections connection = new Connections();

    [Parameter] public string ContactEmail { get; set; }

    [Parameter] public string ContactId { get; set; }

    async Task LoadUserChat(string userId)
    {
        await CheckConnection(Token);
        var contact = await _accountService.GetUserDetailsAsync(userId);
        ContactId = contact.Id.ToString();
        ContactEmail = contact.Email;
        messages = new List<ChatMessages>();
        messages = await _chatService.GetConversationAsync(ContactId, CurrentUserId);
    }

    async Task LoadFullChatHistory(string userId)
    {
        var contact = await _accountService.GetUserDetailsAsync(userId);
        ContactId = contact.Id.ToString();
        ContactEmail = contact.Email;
        messages = new List<ChatMessages>();
        messages = await _chatService.GetFullChatHistory(ContactId, CurrentUserId);
    }

    async Task DeleteChatHistory(string userId)
    {
        var contact = await _accountService.GetUserDetailsAsync(userId);
        ContactId = contact.Id.ToString();
        ContactEmail = contact.Email;
        await _chatService.DeleteChatHistoryAsync(CurrentUserId, ContactId);
        messages = await _chatService.GetFullChatHistory(ContactId, CurrentUserId);
    }

    async Task DeleteChatMessage(string messageId)
    {
        await _chatService.DeleteChatMessageAsync(messageId);
        messages = await _chatService.GetFullChatHistory(ContactId, CurrentUserId);
    }

    async Task GetAllFriends(string currentUserId)
    {
        ChatUsers = await _friendService.FriendsList(int.Parse(currentUserId));
    }

    private void ShowInformation(string userId)
    {
        ContactId = userId;
        _navigationManager.NavigateTo($"card/{ContactId}");
    }

    private async Task CheckConnection(string token)
    {
        if (hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder().WithUrl("https://localhost:44311/chat", options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(token);
            }).Build();
        }
        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }
    }
}
