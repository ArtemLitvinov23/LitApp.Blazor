@page "/card/{ContactId}"

<MudContainer Style="display: inline-block; position: relative; top: 0; bottom: 0; left: 0; right: 0; width: 600px; height: 200px; margin: auto; ">
    <MudCard>
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar Color="Color.Dark" Style="height:70px; width:70px;">@_account.FirstName</MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo="Typo.body1">@_account.FirstName @_account.LastName </MudText>
                <MudText Typo="Typo.body2">@_account.Email</MudText>
                <MudText Typo="Typo.caption">@_account.Phone </MudText>
                <br />
                @if (!string.IsNullOrEmpty(@connection.UserAccount) && @connection.IsOnline == true)
                {
                    <MudText Typo="Typo.caption" Color="Color.Success">Online: @connection.ConnectedAt </MudText>
                }
                else
                {
                    <MudText Typo="Typo.caption" Color="Color.Warning">Offline: @connection.DisconnectedAt </MudText>
                }
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton OnClick="@(() => Return())" Icon="@Icons.TwoTone.ArrowBackIosNew" Color="Color.Inherit" ButtonType="ButtonType.Button">Return</MudIconButton>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudText Typo="Typo.body2">@_account.Description.</MudText>
        </MudCardContent>
        <MudCardActions>
            @if (!friend.Approved)
            {
                <MudButton OnClick="@(() => AddUserToFriends(_account))" StartIcon="@Icons.Sharp.PersonAdd" Color="Color.Inherit" ButtonType="ButtonType.Button">Add to friends</MudButton>
            }
            else
            {
                <MudButton OnClick="@(() => RemoveUserFromFriends(_account))" StartIcon="@Icons.Sharp.PersonAddDisabled" Color="Color.Inherit" ButtonType="ButtonType.Button">Remove from friends</MudButton>
            }
        </MudCardActions>
    </MudCard>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudText Typo="Typo.body1">@errorMessage</MudText>
    }
</MudContainer>


@code {
    private Account _account = new();
    private Connections connection = new();
    private Friend friend = new();
    [CascadingParameter] HubConnection hubConnection { get; set; }
    [Parameter] public string CurrentUserId { get; set; }
    [Parameter] public string ContactId { get; set; }
    [Parameter] public bool IsApproved { get; set; }
    public bool IsPending => friend.RequestFlags == RequestFlags.Pending;
    private string errorMessage;

    void Return()
    {
        _navigationManager.NavigateTo("/users");
    }

    async Task AddUserToFriends(Account _account)
    {
        var friendRequest = new FriendRequest()
            {
                AccountId = _accountService.Account.Id,
                FriendAccountId = _account.Id
            };

        await _friendService.CreateRequestToFriend(friendRequest);

        var currentUserEmail = _accountService.Account.Email;

        await hubConnection.SendAsync("SendFriendRequest", friendRequest);

        hubConnection.On<FriendRequest>("ReceiveFriendRequest", async (request) =>
                  {
                      CurrentUserId = request.AccountId.ToString();
                      ContactId = request.FriendAccountId.ToString();
                      await hubConnection.SendAsync("FriendNotificationAsync", $"New friend request from {_accountService.Account.Email}", CurrentUserId, ContactId);
                      StateHasChanged();
                  });
    }

    async Task RemoveUserFromFriends(Account _account)
    {
        await _friendService.DeleteFriend(_account.Id);
        IsApproved = false;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _account = await _accountService.GetUserDetailsAsync(ContactId);
            friend = await _friendService.GetFriend(_account.Id);
            IsApproved = friend.Approved;
            connection = await _connectionService.GetStatusUserAsync(_account.Id.ToString());
            var token = _accountService.Account.JwtToken;
            await CheckConnection(token);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            IsApproved = true;
            StateHasChanged();
        }
    }

    private async Task CheckConnection(string token)
    {
        if (hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder().WithUrl("https://localhost:44311/chat", options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(token);
            }).Build();
        }
        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }
    }
}