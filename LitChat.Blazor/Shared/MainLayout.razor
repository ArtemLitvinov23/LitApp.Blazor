@inherits LayoutComponentBase
<audio id="notification" src="media/notification.mp3" />
<audio id="friend" src="~/media/chat.mp3" />

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="0" Color="Color.Dark">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" Edge="Edge.Start" />
        <MudText Typo="Typo.h6" Class="ml-4">Litchat</MudText>
        <MudSpacer />
        @if (_accountService.Account != null)
        {
            <MudText>@_accountService.Account.Email.ToLower()</MudText>

            <MudBadge Dot="IsDot" Overlap="true" Class="mx-6 my-4">
                <MudIconButton OnClick="@(() => FriendRequest(CurrentUserId))" Icon="@Icons.Material.Filled.EmojiPeople" Color="Color.Inherit" ButtonType="ButtonType.Button"></MudIconButton>
            </MudBadge>
            <MudIconButton Icon="@Icons.Custom.Brands.LinkedIn" Color="Color.Inherit" />
            <MudIconButton OnClick="@(() => EditProfile(CurrentUserId))" Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit"></MudIconButton>
            <MudIconButton OnClick="@(() => Logout())" Icon="@Icons.Outlined.Logout" Color="Color.Inherit"></MudIconButton>
        }
    </MudAppBar>
    <MudDrawer @bind-Open=" _drawerOpen" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
            <CascadingValue Value="hubConnection">
                @Body
            </CascadingValue>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private HubConnection hubConnection;
    [Parameter] public string CurrentUserId { get; set; }
    [Parameter] public string Token { get; set; }
    public bool IsDot { get; set; }
    bool _drawerOpen = false;
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void EditProfile(string id) => _navigationManager.NavigateTo($"/profile");

    void FriendRequest(string id) => _navigationManager.NavigateTo($"/requests");

    private async Task Logout()
    {
        await hubConnection.StopAsync();
        _navigationManager.NavigateTo("/account/logout");
    }

    private async Task<bool> Content(string accountId)
    {
        var requests = await _friendService.PendingRequests(int.Parse(accountId));

        if (requests.Count > 0) return true;

        return false;
    }
    protected override async Task OnInitializedAsync()
    {
        if (_accountService.Account is null || _accountService.Account.TokenExpires <= DateTime.Now)
        {
            _navigationManager.NavigateTo("/account/login");
        }
        else
        {
            CurrentUserId = _accountService.Account.Id.ToString();
            Token = _accountService.Account.JwtToken;
            IsDot = await Content(CurrentUserId);
            await CheckConnection(Token);
            hubConnection.On<string, string, string>("ChatNotification", async (message, receiverUserId, senderUserId) =>
            {
                if (CurrentUserId == receiverUserId)
                {

                    _snackBar.Add(message, Severity.Info, config =>
                    {
                        config.VisibleStateDuration = 10000;
                        config.HideTransitionDuration = 500;
                        config.ShowTransitionDuration = 500;
                        config.Action = "Chat?";
                        config.ActionColor = Color.Info;
                        config.Onclick = snackbar =>
                        {
                            _navigationManager.NavigateTo($"chat/{senderUserId}");
                            return Task.CompletedTask;
                        };
                    });
                }
                await _jsRuntime.InvokeAsync<string>("PlayAudio", "notification");
            });

            hubConnection.On<string, string, string>("FriendNotification", async (message, senderId, recieverId) =>
              {
                  if (CurrentUserId == recieverId)
                  {
                      _snackBar.Add(message, Severity.Info, config =>
                      {
                          config.VisibleStateDuration = 10000;
                          config.HideTransitionDuration = 500;
                          config.ShowTransitionDuration = 500;
                          config.Action = "New friend request";
                          config.ActionColor = Color.Info;
                          config.Onclick = snackbar =>
                          {
                              _navigationManager.NavigateTo($"/requests");
                              return Task.CompletedTask;
                          };
                      });
                  }
                  await _jsRuntime.InvokeAsync<string>("PlayAudio", "friend");
              });
        }
    }
    private async Task CheckConnection(string token)
    {
        if (hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder().WithUrl("https://localhost:44311/chat", options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(token);
            }).Build();
        }
        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }
    }
}
